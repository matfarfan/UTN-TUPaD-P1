#1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, utiliza esa funci√≥n para calcular y 
#mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario

def factorial(num):
    #Caso base: El factorial de 0 es 1.
    #Esta es la condici√≥n que detiene la recursi√≥n.
    if num == 0:
        return 1
    else:
        #Caso recursivo
        return num* factorial(num-1)
    

num=int(input("Ingrese un n√∫mero: "))

#se itera desde 1 hasta el numero ingresado
for i in range (1,num+1):
    print(factorial(i))


#2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. 
#Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

def fibonacci(num):
    #Caso base para la serie de Fibonacci
    if num == 0:
        return 0
    elif num == 1:
        return 1
    else:
        #Paso recursivo: La suma de los dos n√∫meros anteriores en la serie
        return fibonacci(num-1) + fibonacci(num-2)
    

num=int(input("Ingrese un n√∫mero: "))

#se itera desde 0 hasta el numero ingresado
for i in range (0,num+1):
    print(fibonacci(i))


#3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando 
# la f√≥rmula ùëõùëö = ùëõ ‚àó ùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general.

def potencia(n, m):
    #Caso base: Cualquier n√∫mero elevado a la potencia 0 es 1.
    if m==0:
        return 1
    else:
    #Caso recursivo: n^m = n * n^(m-1)
        return n * potencia(n, m-1)
    

print("C√°lculo de potencia con recursividad")
n=int(input("Ingrese la base: "))
m=int(input("Ingrese el exponente: "))
resultado = potencia(n, m)
print(f"{n} elevado a la {m} es: {resultado}")


#4) Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva 
#su representaci√≥n en binario como una cadena de texto.Cuando representamos un n√∫mero en binario, 
#lo expresamos usando solamente ceros (0) y unos (1), en base 2. 
#Para convertir un n√∫mero decimal a binario, se puede seguir este procedimiento:
#1. Dividir el n√∫mero por 2.
#2. Guardar el resto (0 o 1).
#3. Repetir el proceso con el cociente hasta que llegue a 0.
#4. Los restos obtenidos, le√≠dos de abajo hacia arriba, forman el n√∫mero binario
#Convertir el n√∫mero 10 a binario:
#10 √∑ 2 = 5 resto: 0 
#5 √∑ 2 = 2 resto: 1 
#2 √∑ 2 = 1 resto: 0 
#1 √∑ 2 = 0 resto: 1 
#Leyendo los restos de abajo hacia arriba: 1 0 1 0 ‚Üí El resultado binario es "1010".

def decimal_a_binario(decimal):
    #Caso base: Si el n√∫mero es 0 o 1, su representaci√≥n binaria es "0" o "1".
    if decimal == 0:
        return "0"
    elif decimal == 1:
        return "1"
    #La llamada recursiva construye la parte m√°s significativa del binario
    #y luego se le concatena el d√≠gito menos significativo (el resto actual)
    else:
        resto = decimal % 2
        cociente = decimal // 2
        return decimal_a_binario(cociente) + str(resto)
    
decimal=int(input("Ingrese un n√∫mero entero positivo en base decimal: "))
binario = decimal_a_binario(decimal)
print(f"El numero {decimal} expresado en binario es: {binario}")


#5) Implement√° una funci√≥n recursiva llamada es_palindromo(palabra) que reciba una cadena de texto sin espacios ni tildes, 
#y devuelva True si es un pal√≠ndromo o False si no lo es.
#Requisitos:La soluci√≥n debe ser recursiva. No se debe usar [::-1] ni la funci√≥n reversed().

def es_palindromo(palabra):
    #Caso base: si la palabra tiene 0 o 1 letra, es pal√≠ndromo
    if len(palabra) <= 1:
        return True
    #Comparamos el primer y el √∫ltimo car√°cter
    if palabra[0] == palabra[-1]:
        #Cada vez que la funci√≥n se llama, trabaja con una versi√≥n m√°s corta de la palabra,
        #hasta que queda una sola letra o ninguna. En ese punto, se detiene la recursi√≥n y empieza a devolver True hacia atr√°s.
        return es_palindromo(palabra[1:-1])
    else:
        return False

palabra = input("Ingrese una cadena de texto sin espacios ni tildes: ")
print(es_palindromo(palabra))


#6) Escrib√≠ una funci√≥n recursiva en Python llamada suma_digitos(n) que reciba un n√∫mero entero positivo y 
#devuelva la suma de todos sus d√≠gitos. Restricciones:No se puede convertir el n√∫mero a string.
#Us√° operaciones matem√°ticas (%, //) y recursi√≥n.
#Ejemplos:suma_digitos(1234) ‚Üí 10 (1 + 2 + 3 + 4) suma_digitos(9) ‚Üí 9 suma_digitos(305) ‚Üí 8 (3 + 0 + 5)

def suma_digitos(n):
    if n==0:
        return 0
    else:
        ultimo_digito=n%10
        return ultimo_digito + suma_digitos(n//10)
        
n = int(input("Ingrese un n√∫mero entero positivo: "))
print(suma_digitos(n))


#7) Un ni√±o est√° construyendo una pir√°mide con bloques. En el nivel m√°s bajo coloca n bloques,
#en el siguiente nivel uno menos (n - 1), y as√≠ sucesivamente hasta llegar al √∫ltimo nivel con un solo bloque.
#Escrib√≠ una funci√≥n recursiva contar_bloques(n) que reciba el n√∫mero de bloques en el nivel m√°s bajo y devuelva
#el total de bloques que necesita para construir toda la pir√°mide.
# Ejemplos:
#contar_bloques(1) ‚Üí 1 (1)
#contar_bloques(2) ‚Üí 3 (2 + 1)
#contar_bloques(4) ‚Üí 10 (4 + 3 + 2 + 1)

def contar_bloques(n):
      #Caso base: si no hay m√°s niveles, se necesitan 0 bloques
    if n==0:
        return 0
    else:
        #Sumo los bloques del nivel actual y llamo recursivamente para el nivel superior
        return n+ contar_bloques(n-1)
    
n = int(input("Ingrese un n√∫mero de los bloques del nivel m√°s bajo: "))
print(contar_bloques(n))


#8) Escrib√≠ una funci√≥n recursiva llamada contar_digito(numero, digito) que reciba un n√∫mero entero positivo (numero) 
#y un d√≠gito (entre 0 y 9), y devuelva cu√°ntas veces aparece ese d√≠gito dentro del n√∫mero.
# Ejemplos:
#contar_digito(12233421, 2) ‚Üí 3 
#contar_digito(5555, 5) ‚Üí 4 
#contar_digito(123456, 7) ‚Üí 0

def contar_digito(numero, digito):
    #Caso especial: si el n√∫mero es 0 y el d√≠gito buscado tambi√©n es 0
    if numero == 0 and digito == 0:
        return 1
    #Caso base general: si el n√∫mero es 0, pero el d√≠gito no es 0
    elif numero == 0:
        return 0
    else:
        #Extraer el √∫ltimo d√≠gito
        ultimo = numero % 10
        #Comparar el √∫ltimo d√≠gito con el que buscamos
        if ultimo == digito:
            return 1 + contar_digito(numero // 10, digito)
        else:
            return contar_digito(numero // 10, digito)

# Entrada del usuario
numero = int(input("Ingrese un n√∫mero entero positivo: "))
digito = int(input("Ingrese un d√≠gito (entre 0 y 9): "))
print(f"Cantidad de veces que aparece el d√≠gito {digito}:", contar_digito(numero, digito))